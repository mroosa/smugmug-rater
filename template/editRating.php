<?php
  # get info
  $curImg = isset($_REQUEST['i']) ? $_REQUEST['i'] : exit('Missing Image');
  $curId = isset($_REQUEST['t']) ? $_REQUEST['t'] : exit('No ID');
  $newRating = isset($_REQUEST['r']) ? $_REQUEST['r'] : exit('No Rating submitted');
  if ((int)$newRating === 0) exit('No Rating submitted');
  $dir = isset($_REQUEST['d']) ? $_REQUEST['d'] : '';
  $dir = (int)$dir===-1 ? "../" : $dir;

  # load json file
  $jsonfile = $dir . 'data/ratings.json';
  $rattyJSON = file_get_contents($jsonfile);
  $rattyAry = json_decode($rattyJSON, true);

  # assume image is not in json file
  $validImg = false;
  # loop through images
  $ikey = 0;
  $rkey = 0;
  foreach ($rattyAry['images'] as $key => $image) {
    # CHECK to see if image is in json file
    if (in_array($curImg, $image, true)) {
      $validImg = true;
      # image found, set place
      $ikey = $key;
      $curImage = $image;

      # CHECK if any ratings for image exist, set boolean
      $imgHasRatings = array_key_exists('ratings', $curImage);
      # loop through ratings if they exist
      if ($imgHasRatings) {
        # assume no user-rated image
        $userRatedImg = false;
        foreach($curImage['ratings'] as $rat => $rating) {
          # CHECK for user's rating, get score
          if (in_array($curId, $rating, true)) {
            $userRatedImg = true;
            # User rated image prior, set place
            $rkey = $rat;
            # LAST CHECK, if all else is valid, but user has not changed rating, exit
            $rating = ($rating['score'] != $newRating) ? (int)$newRating : exit('Image rating is the same');
          }
        }
      }
    }
  }
  # SET NEW RATING FOR FOUND IMAGE & USER COMBO
  if ($validImg && $imgHasRatings && $userRatedImg) {
    $rattyAry['images'][$ikey]['ratings'][$rkey]['score'] = $rating;
  }

  # IMAGE NOT FOUND
  if (!$validImg) {
    # Make API call to check to see if the image is in album, include filename in case we pull info
    // This file is generated by Composer
    require_once $dir . 'vendor/autoload.php';
    require_once('settings/config.php');
    $options = [
        'AppName'     => $appName,
        '_verbosity'  => '1',
        '_filter'     => ['FileName','ImageKey','Serial','ThumbnailUrl'],
        '_filteruri'  => '',
        '_verbosity'  => 1,
    ];
    $client = new phpSmug\Client($pubKey);
    $albumImages = $client->get('album/' . $albumKey . '!images', $options);
    $imgSerial = null;
    $imgFileName = null;
    foreach($albumImages -> AlbumImage as $k => $v) {
      $imgId = $v -> ImageKey . '-' . $v -> Serial;
      if ($imgId == $curImg) {
        $imgSerial = $imgId;
        $imgFileName = $v -> FileName;
        $imgThumbnail = $v -> ThumbnailUrl;
      }
    };
    if ($imgFileName) {
      $addNewImage = [
        'serial' => $imgSerial,
        'filename' => $imgFileName,
        'thumbnail' => $imgThumbnail,
        'ratings' => [[
          'user' => $curId,
          'score' => (int)$newRating
        ]]
      ];
      array_push($rattyAry['images'], $addNewImage);
      $imgHasRatings = true;
      $userRatedImg = true;
    } else {
      exit('Image does not exist');
    }
  }

  # NO RATINGS FOR FOUND IMAGE
  if (!$imgHasRatings) {
    # no need to see if user is valid, just add ratings
    foreach($rattyAry['images'] as $newKey => &$newVal) {
      if ($newKey === $ikey) {
        $newVal['ratings'] = [
          'user' => $curId,
          'score' => (int)$newRating
        ];
      }
    }
    $userRatedImg = true;
  }

  # NO RATINGS FROM USER FOR IMAGE
  if (!$userRatedImg) {
    # already checked for ratings, add user and rating info
    $addNewRating = [
      'user' => $curId,
      'score' => (int)$newRating
    ];
    array_push($rattyAry['images'][$ikey]['ratings'], $addNewRating);
  }

  # dev, not for production
  // $backup = $dir . 'data/ratings-' . time() . '.json';
  // if (!copy($jsonfile, $backup)) {
  //   echo "failed to copy $jsonfile...\n";
  // }

  # write a new json file
  $newJsonString = json_encode($rattyAry);
  file_put_contents($jsonfile, $newJsonString);

?>
